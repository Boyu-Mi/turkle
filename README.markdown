Run a clone of Amazon's Mechanical **Turk** service in your **l**ocal
**e**nvironment.

This tool is meant to be used as a web service running locally on your network
or personal machine. It will load HIT template files generated by the Amazon
Mechanical Turk web GUI provided to requesters for creating HITs. Input CSV files are
also uploaded to create a HIT based on the template with each row of
values in the CSV file.

The results of the HITs completed by the workers can be downloaded as a TSV file.

# Installation ##

## Initial setup ###

```bash
git clone https://github.com/lukeorland/turkle.git
cd turkle
```

Make sure that the dependencies listed below are met, and then run the commands

```bash
python manage.py syncdb
python manage.py runserver
```

TODO: instructions for installing from an extracted bundle that is distributed
along with the required eggs.

## Dependencies ###

- The packages listed in `requirements.txt`.
  If the packages are not already installed in your environment, and you have
  an internet connection, then you can run the following commands to install
  the required Python packages.

  ```bash
  cd /path/to/clone/of/turkle
  virtualenv --distribute venv
  source venv/bin/activate
  pip install -U distribute
  pip install -r requirements.txt
  ```

# Using it

## Worker instructions

Load the URL of the tool (perhaps
[http://localhost:8000](http://localhost:8000)) in your browser. Click on
**List of HITs**, and then start completing the HITs under the **Unfinished
HITs**

## Requester instructions

### Publish HITs

To publish new HITs, `cd` to the root directory of this server's code
repository and run the command:

    python manage.py publish_hits <template_file_path> <csv_file_path>

with `TEMPLATE_FILE_PATH` replaced with the path to the HIT template file and
`CSV_FILE_PATH` replaced with the path to the CSV file containing the data for
the individual HITs.

### Get results

To get the results of the completed HITs, `cd` to the root directory of
this server's code repository and run the command:

    python manage.py dump_results RESULTS_TSV_FILE_PATH

with `RESULTS_TSV_FILE_PATH` replaced with the desired path to where the
results will be saved. The format is:

* a header row for the first line
* one HIT result per line
* values in each line are tab-delimited
